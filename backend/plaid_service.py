import plaid
from plaid import Configuration, ApiClient
from plaid.api import plaid_api
from dotenv import load_dotenv
import os
#Link token imports
from plaid.model.link_token_create_request import LinkTokenCreateRequest
from plaid.model.link_token_create_request_user import LinkTokenCreateRequestUser
from plaid.model.products import Products
from plaid.model.country_code import CountryCode
from plaid.model.sandbox_item_fire_webhook_request import SandboxItemFireWebhookRequest
from plaid.model.transactions_refresh_request import TransactionsRefreshRequest
from plaid.model.item_public_token_exchange_request import ItemPublicTokenExchangeRequest
from plaid.model.webhook_type import WebhookType
from plaid.model.transactions_sync_request import TransactionsSyncRequest
from plaid_integration.models import AccessToken
from transactions.models import Transaction


load_dotenv()




class PlaidService:

    def __init__(self):
        client_id = os.getenv("PLAID_CLIENT_ID")
        secret = os.getenv("PLAID_SECRET")
        configuration = plaid.Configuration(
            host=plaid.Environment.Sandbox, 
            api_key={
                'clientId': client_id, 
                'secret': secret,
            }
        )

        self.client = plaid_api.PlaidApi(plaid.ApiClient(configuration))


    def create_link_token(self, user_id):
        """
        Creates a link token for initiating the Plaid Link flow. This token is used to securely connect a user's bank account.
        :param user_id: Unique identifier for the user in your system (e.g., database ID).
        :return: A dictionary containing the link token and other relevant information.
        """
        request = LinkTokenCreateRequest(
            user=LinkTokenCreateRequestUser(client_user_id=str(user_id)), # Unique identifier for the user in your system
            client_name = "ai-budgeting-app",
            products=[Products('transactions')], # The products you want to use (transactions, balance, etc.)
            country_codes=[CountryCode("US")], # The country codes you want to support (US, GB, etc.)
            language="en",
            webhook="https://df3e-88-162-5-123.ngrok.io/api/finance/webhook/"

        )
        
        response = self.client.link_token_create(request)
        response_dict = response.to_dict()
        link_token = response_dict.get('link_token')

        return link_token
    

    def exchange_public_token(self, public_token):
        """
        Exchanges a public token for an access token.
        :param public_token: The public token generated by the Plaid Link flow.
        :return: Access token from Plaid.
        """
        exchange_request = ItemPublicTokenExchangeRequest(public_token=public_token)
        response = self.client.item_public_token_exchange(exchange_request)
        response_dict = response.to_dict()
        return {
    'access_token': response_dict.get('access_token'),
    'item_id': response_dict.get('item_id')
}



    def get_accounts(self, access_token):
        """
        Retrieve account information from Plaid
        
        Args:
            access_token: The Plaid access token
            
        Returns:
            Dictionary containing account data
        """
        try:
            # Create request for accounts
            from plaid.model.accounts_get_request import AccountsGetRequest
            
            request = AccountsGetRequest(
                access_token=access_token
            )
            
            # Call the accounts/get endpoint
            response = self.client.accounts_get(request)
            
            # Convert response to dictionary
            return response.to_dict()
        except Exception as e:
            
            return {"accounts": [], "error": str(e)}
        


    def simulate_transactions(self, access_token):
        webhook_request = SandboxItemFireWebhookRequest(
            access_token=access_token,
            webhook_code="DEFAULT_UPDATE",
            webhook_type=WebhookType("TRANSACTIONS")
        )
        self.client.sandbox_item_fire_webhook(webhook_request)


    def sync_transactions(self, access_token, cursor=""):
        request = TransactionsSyncRequest(
            access_token=access_token,
            cursor=cursor, # Optional: Use a cursor to paginate through results. If None, it will start from the beginning.
            count=100,
        )


        response = self.client.transactions_sync(request)
        return response.to_dict()  # Returns the full response as a dictionary, which includes the transactions and a new cursor if available.


    def sync_all_transactions(self, access_token_string):
        try:
            access_token_obj = AccessToken.objects.get(access_token=access_token_string)
        except AccessToken.DoesNotExist:
            return {"error": "AccessToken not found."}

        cursor = access_token_obj.cursor or None
        all_added = []
        all_modified = []
        all_removed = []

        while True:
            response = self.sync_transactions(access_token_string, cursor)

            added = response.get("added", [])
            modified = response.get("modified", [])
            removed = response.get("removed", [])
            cursor = response.get("next_cursor")

            all_added.extend(added)
            all_modified.extend(modified)
            all_removed.extend(removed)

            if not response.get("has_more", False):
                break


        # Save cursor to AccessToken record
        access_token_obj.cursor = cursor
        access_token_obj.save()

        self.save_transactions(access_token_obj, all_added + all_modified)
        return {"added": len(all_added), "modified": len(all_modified), "removed": len(all_removed)}


    def save_transactions(self, access_token_obj, transactions_data):
        for txn in transactions_data:
            transaction_id = txn["transaction_id"]
            amount = txn["amount"]
            name = txn.get("name", "")
            date = txn["date"]
            logo_url = txn.get("logo_url")
            category = ", ".join(txn.get("category", [])) if txn.get("category") else None
            currency = txn.get("iso_currency_code", "USD")

            Transaction.objects.update_or_create(
                transaction_id=transaction_id,
                defaults={
                    "access_token": access_token_obj,
                    "amount": amount,
                    "name": name,
                    "date": date,
                    "logo_url": logo_url,
                    "category": category,
                    "currency": currency
                }
            )
